# Use the official .NET 8 runtime as base image
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /app
EXPOSE 80
EXPOSE 443

# Use the official .NET 8 SDK for building
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /src

# Copy project files
COPY ["{{SERVER_NAME}}/{{SERVER_NAME}}.csproj", "{{SERVER_NAME}}/"]
COPY ["{{CLIENT_DIR}}/{{CLIENT_DIR}}.esproj", "{{CLIENT_DIR}}/"]

# Restore dependencies
RUN dotnet restore "{{SERVER_NAME}}/{{SERVER_NAME}}.csproj"

# Copy all source files
COPY . .

# Build the React client first
WORKDIR /src/{{CLIENT_DIR}}
RUN npm install
RUN npm run build

# Copy built React files to server wwwroot
WORKDIR /src/{{SERVER_NAME}}
RUN mkdir -p wwwroot/generated
RUN cp -r ../{{CLIENT_DIR}}/dist/generated/* wwwroot/generated/ 2>/dev/null || true
RUN cp ../{{CLIENT_DIR}}/dist/*.html wwwroot/ 2>/dev/null || true
RUN cp ../{{CLIENT_DIR}}/dist/*.json wwwroot/ 2>/dev/null || true
RUN cp ../{{CLIENT_DIR}}/dist/*.svg wwwroot/ 2>/dev/null || true

# Build the .NET application
RUN dotnet build "{{SERVER_NAME}}.csproj" -c Release -o /app/build

# Publish the application
FROM build AS publish
RUN dotnet publish "{{SERVER_NAME}}.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Final stage
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# Create a non-root user for security
RUN adduser --disabled-password --gecos '' appuser && chown -R appuser /app
USER appuser

ENTRYPOINT ["dotnet", "{{SERVER_NAME}}.dll"]

